# 스테이징 환경 설정 (운영 환경과 유사하지만 디버깅 가능)
spring:
  profiles:
    active: staging

  # 스테이징 환경 데이터베이스 설정
  datasource:
    driver-class-name: ${DB_DRIVER_CLASS_NAME:com.mysql.cj.jdbc.Driver}
    url: ${DB_URL:jdbc:mysql://localhost:3306/sodam_staging?serverTime=Asia/Seoul&createDatabaseIfNotExist=true}
    username: ${DB_USERNAME:root}
    password: ${DB_PASSWORD:#{null}}
    hikari:
      auto-commit: false
      transaction-isolation: TRANSACTION_READ_COMMITTED
      minimum-idle: 5                     # 스테이징 환경에서는 중간 연결 수
      maximum-pool-size: 15               # 스테이징 환경에서는 중간 연결 수
      idle-timeout: 300000
      max-lifetime: 1800000
      connection-timeout: 30000
      pool-name: SodamStagingHikariPool
      leak-detection-threshold: 60000     # 연결 누수 감지

  # 스테이징 환경 JPA 설정
  jpa:
    hibernate:
      ddl-auto: ${DDL_AUTO:update}        # 스테이징 환경에서는 update 사용
    properties:
      hibernate:
        format_sql: true                  # 스테이징 환경에서는 SQL 포맷팅 활성화
        show_sql: false                   # 스테이징 환경에서는 SQL 출력 비활성화
        generate_statistics: false        # 스테이징 환경에서는 통계 수집 비활성화
        order_inserts: true               # 성능 최적화
        order_updates: true               # 성능 최적화
        jdbc.batch_size: 30               # 스테이징 환경에서는 중간 배치 크기
        jdbc.batch_versioned_data: true
        query.in_clause_parameter_padding: true
        query.plan_cache_max_size: 2048   # 스테이징 환경에서는 중간 캐시 크기
        cache:
          use_second_level_cache: true
          use_query_cache: true
          region.factory_class: org.hibernate.cache.jcache.JCacheRegionFactory
    show-sql: false                       # 스테이징 환경에서는 SQL 출력 비활성화
    open-in-view: false                   # 스테이징 환경에서는 OSIV 비활성화

  # 스테이징 환경 Redis 설정
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      database: 0
      timeout: 5000ms                     # 스테이징 환경에서는 중간 타임아웃
      password: ${REDIS_PASSWORD:#{null}}
      lettuce:
        pool:
          max-active: 12                  # 스테이징 환경에서는 중간 연결 풀
          max-idle: 12
          min-idle: 2
          max-wait: 2000ms
        shutdown-timeout: 100ms

  # 스테이징 환경 캐시 설정
  cache:
    type: redis
    redis:
      time-to-live: 1800000               # 스테이징 환경에서는 30분 기본 TTL
      cache-null-values: false
      key-prefix: "sodam:staging:"
      use-key-prefix: true

# 스테이징 환경 JWT 설정
jwt:
  secret: ${JWT_SECRET:stagingSecretKeyForStagingEnvironmentOnly123456789}
  token-validity-in-seconds: ${JWT_EXPIRATION:1800}      # 스테이징 환경에서는 30분
  refresh-token-validity-in-days: ${JWT_REFRESH_EXPIRATION:14}   # 스테이징 환경에서는 14일
  cookie-name: ${JWT_COOKIE_NAME:sodam_jwt_staging}
  cookie-max-age: ${JWT_COOKIE_MAX_AGE:1800}

# 스테이징 환경 로깅 설정
logging:
  level:
    com.rich.sodam: INFO                  # 스테이징 환경에서는 INFO 레벨
    org.springframework.security: INFO   # 보안 관련 정보
    org.springframework.cache: INFO      # 캐시 관련 정보
    org.springframework.data.redis: INFO # Redis 관련 정보
    org.hibernate.SQL: INFO              # SQL 관련 정보
    root: INFO                            # 전체적으로 INFO 레벨
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/sodam-staging.log
    max-size: 50MB
    max-history: 15

# 스테이징 환경 Swagger 설정 (제한적 활성화)
springdoc:
  api-docs:
    enabled: true                         # 스테이징 환경에서는 API 문서 활성화
  swagger-ui:
    enabled: true                         # 스테이징 환경에서는 Swagger UI 활성화
    path: /swagger-ui.html
    try-it-out-enabled: true
    operations-sorter: method
    tags-sorter: alpha
    filter: true

# 스테이징 환경 Actuator 설정
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,env  # 스테이징 환경에서는 추가 엔드포인트 노출
  endpoint:
    health:
      show-details: always                # 스테이징 환경에서는 상세 정보 항상 표시
    env:
      show-values: when-authorized        # 환경변수는 인증된 경우만 표시
  metrics:
    enabled: true                         # 스테이징 환경에서는 메트릭 활성화

# 스테이징 환경 국세청 API 설정
tax:
  office:
    api:
      key: ${NTS_API_KEY:staging_test_api_key}

# 스테이징 환경 보안 설정
server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: ${SERVER_SERVLET_CONTEXT_PATH:/}
  error:
    include-stacktrace: on-param          # 스테이징 환경에서는 파라미터로 스택 트레이스 제어
    include-message: on-param             # 스테이징 환경에서는 파라미터로 에러 메시지 제어

# 스테이징 환경 전용 설정
app:
  staging:
    debug-mode: true                      # 스테이징 환경에서는 디버그 모드 활성화
    test-data-enabled: true               # 스테이징 환경에서는 테스트 데이터 활성화
    performance-monitoring: true          # 성능 모니터링 활성화
    security:
      rate-limiting:
        enabled: ${API_RATE_LIMIT_ENABLED:false}  # 스테이징에서는 레이트 리미팅 비활성화
        requests-per-minute: ${API_RATE_LIMIT_REQUESTS_PER_MINUTE:120}
